<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>http://yoursite.com/2017/11/08/Binder%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<ul>
<li><p>概述</p>
<p>Binder是Android系统提供的一种IPC(进程间通信)机制，整个android应用层都是基于Binder系统之上的，它就像一个网络，把系统各个服务连接在了一起；当然Android中还有其它的IPC机制，例如Socket，PIC。</p>
<p>Binder是的通信是C/S架构体系，Server端管理着所有的Client请求；当然在这里还有一个重要的全局服务ServiceManager,它的作用是管理着系统中的各种服务。Server在开户的时候会注册到ServiceManager中去，当Client需要使用这些Service时会通过ServiceManager来拿到这些服务。三都的关系如下：</p>
<p><img src="../images/屏幕快照 2017-10-23 上午10.24.13.png" alt="屏幕快照 2017-10-23 上午10.24.13"></p>
<p>​</p>
</li>
<li><p>自定义的Binder通信</p>
<ul>
<li><p>AIDL概述</p>
<p>在Android中, 每个应用程序都有自己的进程，当需要在不同的进程之间传递对象时，该如何实现呢? 显然, Java中是不支持跨进程内存共享的。因此要传递对象, 需要把对象解析成操作系统能够理解的数据格式, 以达到跨界对象访问的目的。在JavaEE中，采用RMI通过序列化传递对象。在Android中, 则采用AIDL(Android Interface Definition Language：接口定义语言)方式实现。</p>
<p>AIDL是一种接口定义语言，用于约束两个进程间的通讯规则，供编译器生成代码，实现Android设备上的两个进程间通信(IPC)。AIDL的IPC机制和EJB所采用的CORBA很类似，进程之间的通信信息，首先会被转换成AIDL协议消息，然后发送给对方，对方收到AIDL协议消息后再转换成相应的对象。由于进程之间的通信信息需要双向转换，所以android采用代理类在背后实现了信息的双向转换，代理类由android编译器生成，对开发人员来说是透明的。</p>
</li>
<li><p>自定义进程通信</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">1</span>.在A应用中创建一个IDownLoad的aidl文件，然后编译，会在studio的build文件中生成IDownLoad的接口文件</div><div class="line"><span class="keyword">package</span> com.example.lidaofu.demo;</div><div class="line"></div><div class="line"><span class="comment">// Declare any non-default types here with import statements</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IDownLoad</span> </span>&#123;</div><div class="line">     </div><div class="line">     <span class="function"><span class="keyword">void</span> <span class="title">downLoad</span><span class="params">(String downUrl)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="number">2</span>.将build的IDownLoad文件复制到B应用中，创建一个服务；在服务的onBinder方法中返回了接口实现类</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IDownLoad.Stub() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span><span class="comment">//这里是远程端真正"工作"的地方</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downLoad</span><span class="params">(String downUrl)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">                System.out.println(<span class="string">"start down:"</span> + downUrl);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="number">3</span>.在A应用中开户服务并绑定服务</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//开户绑定服务</span></div><div class="line">        Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,DownService.class);</div><div class="line">        bindService(intent,serviceConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> ServiceConnection serviceConnection=<span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">          <span class="comment">//在B应用是onBinder方法中返回的IBinder传递到这里，在这里通过asInterface方法</span></div><div class="line">          <span class="comment">//将IBinder转换成了我们需要的对象并调用，并调用它的方法</span></div><div class="line">              IDownLoad  downLoadService=IDownLoad.Stub.asInterface(service);</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  downLoadService.downLoad(<span class="string">"http://wwww.baidu.com"</span>);</div><div class="line">              &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                  e.printStackTrace();</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line">  &#125;</div><div class="line">  ~~~~</div><div class="line"></div><div class="line">  这样我们就完成了本地端与远程端的通信了，这里我们来看下编译生成的IDownLoad这个接口，这个接口是编译后系统生成，系统帮我们自动生成了Stub，Proxy二个静态内部类，Stub是Service端的代理类，Proxy是Client端的代理类，当我们要调用Service端的方法时不是直接能调用而是通过Client的代理类Proxy来访问Service端的Stub，Stub来调用服务端定义的方法，而这个方法就是我们在onBind方法中创建Stub时实现的方法；</div><div class="line"></div><div class="line">  ~~~~java</div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDownLoad</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span> </span>&#123;</div><div class="line">      <span class="comment">/**</span></div><div class="line">       Stub是个抽象方法，它是我们服务端的代理 ，当我们的Client端通过Proxy调用Service端时，它调用的其实是Stub的onTransact()方法，在这个方法内部根据方法法来判断我们调用的是那个方法，在Client中调用downLoad方法时，对应的它会通过code来调用this.downLoad(arg0)方法，而这个方法是未抽象的，它是我们在服务中创建Stub代理类时要实现的；</div><div class="line">       */</div><div class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">example</span>.<span class="title">lidaofu</span>.<span class="title">demo</span>.<span class="title">IDownLoad</span> </span>&#123;</div><div class="line">        <span class="comment">//这个静态常量是用来区分Binder的，相当于Binder的身份标识</span></div><div class="line">          <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"com.example.lidaofu.demo.IDownLoad"</span>;</div><div class="line"></div><div class="line">        	<span class="comment">//将这个Binder绑定身份标识</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</div><div class="line">              <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">/**</span></div><div class="line">           * 将IBinder对象转换成我们需要的Service，</div><div class="line">           */</div><div class="line">          <span class="keyword">public</span> <span class="keyword">static</span> com.example.lidaofu.demo.<span class="function">IDownLoad <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</div><div class="line">              <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</div><div class="line">                  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">              &#125;</div><div class="line">            	<span class="comment">//根据Binder身份标识来查询这个Binder对象，我们知道如果Binder在同一个进程中</span></div><div class="line">            	<span class="comment">//我们是可以根据身份标识查出这个对象的，如果对象不为空就证明Client调用方和</span></div><div class="line">              <span class="comment">//Service端在同一个进程，这样就不需要创建Proxy，直接返回这个Binder即可</span></div><div class="line">              android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class="line">            	<span class="comment">//Client和Service在同一个进程</span></div><div class="line">              <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.example.lidaofu.demo.IDownLoad))) &#123;</div><div class="line">                  <span class="keyword">return</span> ((com.example.lidaofu.demo.IDownLoad) iin);</div><div class="line">              &#125;</div><div class="line">            	<span class="comment">//Client和Service不在同一个进程，这时我们需要创建一个Client的代理类返回给</span></div><div class="line">            	<span class="comment">//Client供Client端调用</span></div><div class="line">              <span class="keyword">return</span> <span class="keyword">new</span> com.example.lidaofu.demo.IDownLoad.Stub.Proxy(obj);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">              <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">              <span class="keyword">switch</span> (code) &#123;</div><div class="line">                  <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</div><div class="line">                      reply.writeString(DESCRIPTOR);</div><div class="line">                      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                  &#125;</div><div class="line">                  <span class="keyword">case</span> TRANSACTION_downLoad: &#123;</div><div class="line">                      data.enforceInterface(DESCRIPTOR);</div><div class="line">                      java.lang.String _arg0;</div><div class="line">                      _arg0 = data.readString();</div><div class="line">                      <span class="keyword">this</span>.downLoad(_arg0);</div><div class="line">                      reply.writeNoException();</div><div class="line">                      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">        	<span class="comment">//这个是Client端的代理类，通过它来访问Service端提供的服务；我们看它的构造方法，这个</span></div><div class="line">        	<span class="comment">//mRemote是怎么来的呢，我们看下它是怎么调用的呢，在我们开始绑定Service的时候我们看</span></div><div class="line">        	<span class="comment">//到调用了IDownLoad.Stub.asInterface(service)这个方法，在asInterface()方法中我</span></div><div class="line">        	<span class="comment">//看到当Client跟Service不在同一个进程时创建Proxy(IBinder remote)来返回给Client</span></div><div class="line">        	<span class="comment">//端，这样我们可以看到这个mRemote其实就是我们的Service端</span></div><div class="line">          <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">example</span>.<span class="title">lidaofu</span>.<span class="title">demo</span>.<span class="title">IDownLoad</span> </span>&#123;</div><div class="line">              <span class="keyword">private</span> android.os.IBinder mRemote;</div><div class="line"></div><div class="line">              Proxy(android.os.IBinder remote) &#123;</div><div class="line">                  mRemote = remote;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</div><div class="line">                  <span class="keyword">return</span> mRemote;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</div><div class="line">                  <span class="keyword">return</span> DESCRIPTOR;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">            	<span class="comment">//当我们调用这个方法时，它内部调用的是mRemote.transact()这个方法，这个</span></div><div class="line">            	<span class="comment">//方法调用的是父类的方法，具体看下面分析</span></div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downLoad</span><span class="params">(java.lang.String downUrl)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</div><div class="line">                  android.os.Parcel _data = android.os.Parcel.obtain();</div><div class="line">                  android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class="line">                  <span class="keyword">try</span> &#123;</div><div class="line">                      _data.writeInterfaceToken(DESCRIPTOR);</div><div class="line">                      _data.writeString(downUrl);</div><div class="line">                      mRemote.transact(Stub.TRANSACTION_downLoad, _data, _reply, <span class="number">0</span>);</div><div class="line">                      _reply.readException();</div><div class="line">                  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                      _reply.recycle();</div><div class="line">                      _data.recycle();</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_downLoad = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downLoad</span><span class="params">(java.lang.String downUrl)</span> <span class="keyword">throws</span> android.os.RemoteException</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ~~~~</div></pre></td></tr></table></figure>
<p>我们看到Proxy最后调用的是mRmote.transact（int code, Parcel data, Parcel reply,int flags）这个方法，通过int类型的code来区分我们调用的方法，而reply就是序列化的我们要传递的参数了；看到这里我们惊奇的发现，它里面调用的竟然是onTransact(code, data, reply, flags)，这个方法不是Stub类中有的嘛；对就是这样Proxy就是我们有Client端代表跟Server通信，而Server的回应就是Stub；onTransact(code, data, reply, flags)方法Binder也实现了，不过一般的Stub都会复写这个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/Users/lidaofu/Library/Android/sdk/sources/android-<span class="number">25</span>/android/os/Binder.java</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Default implementation rewinds the parcels and calls onTransact.  On</div><div class="line">    * the remote side, transact calls into the binder to do the IPC.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">transact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply,</span></span></div><div class="line">           <span class="keyword">int</span> flags) <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">false</span>) Log.v(<span class="string">"Binder"</span>, <span class="string">"Transact: "</span> + code + <span class="string">" to "</span> + <span class="keyword">this</span>);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</div><div class="line">           data.setDataPosition(<span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">boolean</span> r = onTransact(code, data, reply, flags);</div><div class="line">       <span class="keyword">if</span> (reply != <span class="keyword">null</span>) &#123;</div><div class="line">           reply.setDataPosition(<span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> r;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>下面我们来总结下Binder通信要点：</p>
<p>1.IDownLoad接口继承于android.os.IInterface;默认会生成二个静态的内部类Stub，Proxy;Client跟Server不是直接通信的；Client通过Proxy跟Server的Stub通信；Proxy是Client跟Server通信的代表，Stub是Server跟Client通信的代表；</p>
<p>2.Stub中有二个方法，asInterface(android.os.IBinder obj)表示将IBinder转换成接口，asBinder()表示将接口转换成IBinder;</p>
<p>3.Proxy中有个变量mRemote，表示的就是Server端的引用；当我们调用Server端的方法时最后调用的都是mRemote.transact(int code,Parcel data,Parcel reply,int flags)这个方法，这个方法将我们要调用的方法通过code变量来区分开来并最终调用了Server端的onTransact(code, data, reply, flags)方法，而onTransact方法中调用的就是我们Server端要实现的方法；</p>
<ul>
<li><p>系统中的Binder分析</p>
<p>了解了自定义的Binder的通信，我们知道有一个Stub和一个Proxy这样的东西来进行Client跟Server的通信；那么系统中的Client跟Server又是怎么通信的呢，其实原理是一样的，不管是系统还是自定义的</p>
<p>Binder，要想进行进程间的通信都是需要有一个Stub跟一个Proxy;下面我们来看下系统中的PackageManagerServer是如何进行工作的；</p>
<p>我们来看下IPackageManager.aidl</p>
</li>
</ul>
<p><img src="../images/20160909144429620.png" alt="20160909144429620"></p>
<p>我们发现确实是有Stub跟Proxy这二个类，跟自定义Binder通信一样，它们也是通过这二个类来实现Binder的跨进程通信的；</p>
<p>看下我们的PackageManagerServer类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public class PackageManagerService extends IPackageManager.Stub</div></pre></td></tr></table></figure>
<p>发现它是继承于IPackageManager.Stub这个类查看代码发现它实现了IPackageManager接口中的方法</p>
<p>那么就可以得知当Stub中通过onTransact调用的方法我们的PackageManagerService确实实现了，那么Client端是如何得到这个Server端的引用的呢？</p>
<p>通过查看源码，最终它会调用到这个方法，返回PackageManagerServer服务的引用；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IPackageManager <span class="title">getPackageManager</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (sPackageManager != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="comment">//Slog.v("PackageManager", "returning cur default = " + sPackageManager);</span></div><div class="line">           <span class="keyword">return</span> sPackageManager;</div><div class="line">       &#125;</div><div class="line">       IBinder b = ServiceManager.getService(<span class="string">"package"</span>);</div><div class="line">       <span class="comment">//Slog.v("PackageManager", "default service binder = " + b);</span></div><div class="line">       sPackageManager = IPackageManager.Stub.asInterface(b);</div><div class="line">       <span class="comment">//Slog.v("PackageManager", "default service = " + sPackageManager);</span></div><div class="line">       <span class="keyword">return</span> sPackageManager;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>通过这里我们看到ServiceManager.getService(“package”)这个方法，ServiceManager又是什么东西呢？其实它是我们系统服务的总管，它管理着系统是的所有Server服务，当我们开机时它就会启动并且将系统中一些重要的Server启动且将Server的引用保存起来，当我们需要这些Server时它就会通过getService()将服务返回给我们，以供我们使用；在下一章我们再详细分析这个ServiceManager；这样我们就可以理解我们的这个PackageManager的引用是怎么来的呢。跟自定义的Binder比起来，发现自定义的Server是通过我们绑定服务时的onBinder返回给Client的，而系统的是直接在总管ServerManager那拿到的。</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yoursite.com/2017/10/23/AMS%E5%88%86%E6%9E%90/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yoursite.com/2017/10/20/Activity%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%98%BE%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p>​                        </p>
<ul>
<li>activity的创建其实是zygote分裂出来的，当zygote进程通过socket接受到fork进程的时候，它会fork一个子进程，这个进程就app对应的进程，它的入口函数就是ActivityThread类的main函数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">/Android/sdk/sources/android-25/android/app/ActivityThread.java</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;ActivityThreadMain&quot;);</div><div class="line">        SamplingProfilerIntegration.start();</div><div class="line"></div><div class="line">        // CloseGuard defaults to true and can be quite spammy.  We</div><div class="line">        // disable it here, but selectively enable it later (via</div><div class="line">        // StrictMode) on debug builds, but using DropBox, not logs.</div><div class="line">        CloseGuard.setEnabled(false);</div><div class="line"></div><div class="line">        Environment.initForCurrentUser();</div><div class="line"></div><div class="line">        // Set the reporter for event logging in libcore</div><div class="line">        EventLogger.setReporter(new EventLoggingReporter());</div><div class="line"></div><div class="line">        // Make sure TrustedCertificateStore looks in the right place for CA certificates</div><div class="line">        final File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class="line">        TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class="line"></div><div class="line">        Process.setArgV0(&quot;&lt;pre-initialized&gt;&quot;);</div><div class="line">		//这里开启主线程的loop的，我们代码中handler发送的消息都是在这个loop中处理的</div><div class="line">        Looper.prepareMainLooper();</div><div class="line">		//创建ActivityThread类，在这个类中有一个重要的变量mAppThread</div><div class="line">        ActivityThread thread = new ActivityThread();</div><div class="line">        thread.attach(false);</div><div class="line"></div><div class="line">        if (sMainThreadHandler == null) &#123;</div><div class="line">            sMainThreadHandler = thread.getHandler();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (false) &#123;</div><div class="line">            Looper.myLooper().setMessageLogging(new</div><div class="line">                    LogPrinter(Log.DEBUG, &quot;ActivityThread&quot;));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // End of event ActivityThreadMain.</div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">        Looper.loop();</div><div class="line"></div><div class="line">        throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在创建完ActivityThread类后它调用了一个attach这个方法（只贴出来了重要的部分，其它的代码省略）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> system)</span> </span>&#123;</div><div class="line">      sCurrentActivityThread = <span class="keyword">this</span>;</div><div class="line">      mSystemThread = system;</div><div class="line">      <span class="keyword">if</span> (!system) &#123;</div><div class="line">         ViewRootImpl.addFirstDrawHandler(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                  ensureJitEnabled();</div><div class="line">              &#125;</div><div class="line">          &#125;);</div><div class="line">          android.ddm.DdmHandleAppName.setAppName(<span class="string">"&lt;pre-initialized&gt;"</span>,</div><div class="line">                                                  UserHandle.myUserId());</div><div class="line">          RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class="line">        	<span class="comment">//这里比较重要的，这个方法就是通过servicemanager获取AMS服务</span></div><div class="line">          <span class="keyword">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//将ams服务与当前的进程联系起来</span></div><div class="line">              mgr.attachApplication(mAppThread);</div><div class="line">          &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">              <span class="keyword">throw</span> ex.rethrowFromSystemServer();</div><div class="line">          &#125;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">          .....</div><div class="line">      &#125;</div><div class="line">  .....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过ActivityManagerNative.getDefault();通过这个方法得到了AMS服务进程；但是这个服务进程是怎么跟当前进程联系起来的呢，我们看下ApplicationThread这个类，这个类是联系ActivityThread跟AMS的桥梁；当AMS在服务端创建完成Activity后最终会调用ApplicationThread中的scheduleLaunchActivity方法来开户客户端activity的创建；这个方法中会调用handleLaunchActivity这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">/Android/sdk/sources/android-<span class="number">25</span>/android/app/ActivityThread.<span class="function">java</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent, String reason)</span> &#123;</div><div class="line">        <span class="comment">// If we are getting ready to gc after going to the background, well</span></div><div class="line">        <span class="comment">// we are back active so skip it.</span></div><div class="line">        unscheduleGcIdler();</div><div class="line">        mSomeActivitiesChanged = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (r.profilerInfo != <span class="keyword">null</span>) &#123;</div><div class="line">            mProfiler.setProfiler(r.profilerInfo);</div><div class="line">            mProfiler.startProfiling();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure we are running with the most recent config.</span></div><div class="line">        handleConfigurationChanged(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (localLOGV) Slog.v(</div><div class="line">            TAG, <span class="string">"Handling launch of "</span> + r);</div><div class="line">        WindowManagerGlobal.initialize();</div><div class="line">		<span class="comment">//在这个方法中会调用</span></div><div class="line">        Activity a = performLaunchActivity(r, customIntent);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</div><div class="line">            r.createdConfig = <span class="keyword">new</span> Configuration(mConfiguration);</div><div class="line">            reportSizeConfigurations(r);</div><div class="line">            Bundle oldState = r.state;</div><div class="line">            handleResumeActivity(r.token, <span class="keyword">false</span>, r.isForward,</div><div class="line">                    !r.activity.mFinished &amp;&amp; !r.startsNotResumed, r.lastProcessedSeq, reason);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!r.activity.mFinished &amp;&amp; r.startsNotResumed) &#123;</div><div class="line">                performPauseActivityIfNeeded(r, reason);</div><div class="line">                <span class="keyword">if</span> (r.isPreHoneycomb()) &#123;</div><div class="line">                    r.state = oldState;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// If there was an error, for any reason, tell the activity manager to stop us.</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ActivityManagerNative.getDefault()</div><div class="line">                    .finishActivity(r.token, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</div><div class="line">                            Activity.DONT_FINISH_TASK_WITH_ACTIVITY);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> ex.rethrowFromSystemServer();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">		........</div><div class="line">        Activity activity = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;<span class="comment">//通过反射创建了Activity</span></div><div class="line">            java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</div><div class="line">            activity = mInstrumentation.newActivity(</div><div class="line">                    cl, component.getClassName(), r.intent);</div><div class="line">            StrictMode.incrementExpectedActivityCount(activity.getClass());</div><div class="line">            r.intent.setExtrasClassLoader(cl);</div><div class="line">            r.intent.prepareToEnterProcess();</div><div class="line">            <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</div><div class="line">                r.state.setClassLoader(cl);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="string">"Unable to instantiate activity "</span> + component</div><div class="line">                    + <span class="string">": "</span> + e.toString(), e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">			 ........</div><div class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">              ........</div><div class="line">                Window window = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (r.mPendingRemoveWindow != <span class="keyword">null</span> &amp;&amp; r.mPreserveWindow) &#123;</div><div class="line">                    window = r.mPendingRemoveWindow;</div><div class="line">                    r.mPendingRemoveWindow = <span class="keyword">null</span>;</div><div class="line">                    r.mPendingRemoveWindowManager = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">              <span class="comment">//创建的activity一些重要数据的绑定</span></div><div class="line">                activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</div><div class="line">                        r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class="line">                        r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class="line">                        r.referrer, r.voiceInteractor, window);</div><div class="line">              ......</div><div class="line">                activity.mCalled = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">if</span> (r.isPersistable()) &#123;<span class="comment">//在这里调用了Activity的onCreate方法</span></div><div class="line">                    mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class="line">                &#125;</div><div class="line">              .....</div><div class="line">        &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="string">"Unable to start activity "</span> + component</div><div class="line">                    + <span class="string">": "</span> + e.toString(), e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> activity;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以看出在handleLaunchActivity方法中首先调用performLaunchActivity在这个方法通过反射创建了activity，并且调用attach方法将一些重要的数据跟activity进行了绑定；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread,</span></span></div><div class="line">            Instrumentation instr, IBinder token, <span class="keyword">int</span> ident,</div><div class="line">            Application application, Intent intent, ActivityInfo info,</div><div class="line">            CharSequence title, Activity parent, String id,</div><div class="line">            NonConfigurationInstances lastNonConfigurationInstances,</div><div class="line">            Configuration config, String referrer, IVoiceInteractor voiceInteractor,</div><div class="line">            Window window) &#123;</div><div class="line">        attachBaseContext(context);</div><div class="line"></div><div class="line">        mFragments.attachHost(<span class="keyword">null</span> <span class="comment">/*parent*/</span>);</div><div class="line"></div><div class="line">        mWindow = <span class="keyword">new</span> PhoneWindow(<span class="keyword">this</span>, window);</div><div class="line">        mWindow.setWindowControllerCallback(<span class="keyword">this</span>);</div><div class="line">        mWindow.setCallback(<span class="keyword">this</span>);</div><div class="line">        mWindow.setOnWindowDismissedCallback(<span class="keyword">this</span>);</div><div class="line">        mWindow.getLayoutInflater().setPrivateFactory(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">if</span> (info.softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) &#123;</div><div class="line">            mWindow.setSoftInputMode(info.softInputMode);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (info.uiOptions != <span class="number">0</span>) &#123;</div><div class="line">            mWindow.setUiOptions(info.uiOptions);</div><div class="line">        &#125;</div><div class="line">        mUiThread = Thread.currentThread();</div><div class="line"></div><div class="line">        mMainThread = aThread;</div><div class="line">        mInstrumentation = instr;</div><div class="line">        mToken = token;</div><div class="line">        mIdent = ident;</div><div class="line">        mApplication = application;</div><div class="line">        mIntent = intent;</div><div class="line">        mReferrer = referrer;</div><div class="line">        mComponent = intent.getComponent();</div><div class="line">        mActivityInfo = info;</div><div class="line">        mTitle = title;</div><div class="line">        mParent = parent;</div><div class="line">        mEmbeddedID = id;</div><div class="line">        mLastNonConfigurationInstances = lastNonConfigurationInstances;</div><div class="line">        <span class="keyword">if</span> (voiceInteractor != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (lastNonConfigurationInstances != <span class="keyword">null</span>) &#123;</div><div class="line">                mVoiceInteractor = lastNonConfigurationInstances.voiceInteractor;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mVoiceInteractor = <span class="keyword">new</span> VoiceInteractor(voiceInteractor, <span class="keyword">this</span>, <span class="keyword">this</span>,</div><div class="line">                        Looper.myLooper());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mWindow.setWindowManager(</div><div class="line">                (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),</div><div class="line">                mToken, mComponent.flattenToString(),</div><div class="line">                (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (mParent != <span class="keyword">null</span>) &#123;</div><div class="line">            mWindow.setContainer(mParent.getWindow());</div><div class="line">        &#125;</div><div class="line">        mWindowManager = mWindow.getWindowManager();</div><div class="line">        mCurrentConfig = config;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在attach方法中做了一个很重要的操作就是创建了Window，可以看到这个Window是PhoneWindow，这个就是我们View的载体;所有视图的显示都是在这个窗体上进行了；可以看出一个Activity对应着一个Window,在android中Window是view的载体,Dialog,PopWindow等也有一个Window的变量；activity实现了window的Callback接口，这个接口进行事件的处理，例如键盘事件，touch事件，并且给Window设置了WindowManager管理器；接着从handleLaunchActivity这个方法分析，在处理完performLaunchActivity方法会接着走到handleResumeActivity方法；在这个方法中其实就是将视图添加到Window中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleResumeActivity</span><span class="params">(IBinder token,</span></span></div><div class="line">            <span class="keyword">boolean</span> clearHide, <span class="keyword">boolean</span> isForward, <span class="keyword">boolean</span> reallyResume, <span class="keyword">int</span> seq, String reason) &#123;</div><div class="line">       		.......</div><div class="line">            <span class="keyword">if</span> (r.window == <span class="keyword">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</div><div class="line">                r.window = r.activity.getWindow();</div><div class="line">                View decor = r.window.getDecorView();</div><div class="line">                decor.setVisibility(View.INVISIBLE);</div><div class="line">                ViewManager wm = a.getWindowManager();</div><div class="line">                WindowManager.LayoutParams l = r.window.getAttributes();</div><div class="line">                a.mDecor = decor;</div><div class="line">                l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</div><div class="line">                l.softInputMode |= forwardBit;</div><div class="line">                <span class="keyword">if</span> (r.mPreserveWindow) &#123;</div><div class="line">                    a.mWindowAdded = <span class="keyword">true</span>;</div><div class="line">                    r.mPreserveWindow = <span class="keyword">false</span>;</div><div class="line">                    ViewRootImpl impl = decor.getViewRootImpl();</div><div class="line">                    <span class="keyword">if</span> (impl != <span class="keyword">null</span>) &#123;</div><div class="line">                        impl.notifyChildRebuilt();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (a.mVisibleFromClient &amp;&amp; !a.mWindowAdded) &#123;</div><div class="line">                    a.mWindowAdded = <span class="keyword">true</span>;</div><div class="line">                    wm.addView(decor, l);<span class="comment">//这里将view添加到window视图上</span></div><div class="line">                &#125;</div><div class="line">              .......</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>r.activity.getWindow()得到Activity的Window，这个Window其实就是PhoneWindow，因为在之前已经调用了attach方法，在这个方法中创建了Window，而r.window.getDecorView()又是什么东西呢；其实这是一个父类为FrameLayout的View,在创建PhoneWindow时会创建这个View,这是View包含状态栏；我们平时在Activity中调用setContentView方法到最后调用的就是PhoneWindow中的setContentView方法，这个方法将我们的布局添加到PhoneWindow中去；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/sdk/sources/android-<span class="number">25</span>/android/app/Activity.<span class="function">java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResID)</span> &#123;</div><div class="line">        getWindow().setContentView(layoutResID);<span class="comment">//这里的Window就是PhoneWindow</span></div><div class="line">        initWindowDecorActionBar();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是这个View到底是怎么添加到Window上去的呢，我们看下Window中的addView方法，最张这个addview方法是调用的WindowManagerGlobal中的addView方法；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">/sdk/sources/android-<span class="number">25</span>/android/view/WindowManagerGlobal.<span class="function">java</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params,</span></div><div class="line">            Display display, Window parentWindow) &#123;</div><div class="line">        ......</div><div class="line">        ViewRootImpl root;</div><div class="line">        View panelParentView = <span class="keyword">null</span>;</div><div class="line">	    ......</div><div class="line">            <span class="keyword">int</span> index = findViewLocked(view, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (mDyingViews.contains(view)) &#123;</div><div class="line">                    <span class="comment">// Don't wait for MSG_DIE to make it's way through root's queue.</span></div><div class="line">                    mRoots.get(index).doDie();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"View "</span> + view</div><div class="line">                            + <span class="string">" has already been added to the window manager."</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// The previous removeView() had not completed executing. Now it has.</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// If this is a panel window, then find the window it is being</span></div><div class="line">            <span class="comment">// attached to for future reference.</span></div><div class="line">            <span class="keyword">if</span> (wparams.type &gt;= WindowManager.LayoutParams.FIRST_SUB_WINDOW &amp;&amp;</div><div class="line">                    wparams.type &lt;= WindowManager.LayoutParams.LAST_SUB_WINDOW) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> count = mViews.size();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">                    <span class="keyword">if</span> (mRoots.get(i).mWindow.asBinder() == wparams.token) &#123;</div><div class="line">                        panelParentView = mViews.get(i);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">			<span class="comment">//将view,root添加到集合中；</span></div><div class="line">            root = <span class="keyword">new</span> ViewRootImpl(view.getContext(), display);</div><div class="line"></div><div class="line">            view.setLayoutParams(wparams);</div><div class="line"></div><div class="line">            mViews.add(view);</div><div class="line">            mRoots.add(root);</div><div class="line">            mParams.add(wparams);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// do this last because it fires off messages to start doing things</span></div><div class="line">        <span class="keyword">try</span> &#123;<span class="comment">//这个方法中完成view绘制的相关操作</span></div><div class="line">            root.setView(view, wparams, panelParentView);</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</div><div class="line">            <span class="comment">// BadTokenException or InvalidDisplayException, clean up.</span></div><div class="line">            <span class="keyword">synchronized</span> (mLock) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> index = findViewLocked(view, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</div><div class="line">                    removeViewLocked(index, <span class="keyword">true</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在源码中可以看出其实WindowManagerGlobal是一个单例，它存储着一个app中的view，其实就是已经开启的Activity的view的视图；而view的绘制过程是在ViewRootImpl中完成的，可以看出每个View都对应着一个ViewRootImpl,并且也存储在WindowManagerGlobal中；来看下ViewRootImpl的setView方法；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/sdk/sources/android-<span class="number">25</span>/android/view/ViewRootImpl.<span class="function">java</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> &#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mView == <span class="keyword">null</span>) &#123;</div><div class="line">                mView = view;</div><div class="line">              ......</div><div class="line">                requestLayout();</div><div class="line">              ......</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>看到个熟悉的方法requestLayout，在这个方法中最终会调用performTraversals方法，在这个方法中完成</p>
<p>view的绘制动作。</p>
<ul>
<li><p>总结</p>
<p>1.Activity的最外层View是一个DecorView,而我们在Activity中调用setContentView方法来设置的View只是DecorView的一部分，DecorView是一个FrameLayout类型的ViewGroup</p>
<p>2.在启动Activity的时候调用attach方法会绑定与activity相关的一些重要方法，每个Activity都包含一个</p>
<p>Window(PhoneWindow)和一个WindowManager(WindowManagerImpl)对象，这个两个对象控制着Activity的显示。</p>
<p>3.WindowManagerImpl内部使用调用了WindowManagerGlobal，WindowManagerGlobal是一个单例，它内部存储管理着app中每个Activity设置的view；每个view都对应着一个ViewRootImpl；</p>
<p>4.ViewRootImpl实现了ViewParent的方法；内部有一个Handler，用来处理view的绘制动作；Activity的显示就是在ViewRootImpl中调用performTraversals方法完成的。它还通过Binder系统和WMS进行跨进程交互。</p>
<p>5.整个Activity的绘图是在Surface中完成的，Surface提供一个Canvas，然后交给view去线绘制，最后释放这块内存。</p>
<p>​</p>
</li>
</ul>
<p><img src="/Users/lidaofu/Documents/Android技术分析记录/image/屏幕快照 2017-10-20 上午11.23.32.png" alt="屏幕快照 2017-10-20 上午11.23.32"></p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yoursite.com/2017/09/27/%E7%B3%BB%E7%BB%9FServiceManager%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>一.系统ServiceManger的启动过程分析</p>
<p>ServiceManager分为C层及Java层的概念，C层的ServiceManager的启动是在系统启动init进程的时候启动，系统在启动init进程的时候会启动很多重要的进程，其中有二个很重要的进程就是servicemanager和zygote，这二个进程在android中相互监控的，其中有一个进程挂了，系统就会重启。init进程首先会启动servicemanager进程，这个进程主要作用就是进程间的通信，俗称：跨进程通信AIDL；当然这个进程是用C语言写的，它所对应的java层的代码是ServiceManager这个类，在这个类中可以拿到servicemanager进程中的binder引用；其实跨进程通信用的就是使用底层binder进行数据传输的；在启动完servicemanager进程后init进程会进行zygote进程的创建，这个进程的作用就是fork进程的，它有创建的过程中会创建一个socket，这个socket是跟ams进行通信的，在ams中启动一个新的应用时，它会通过socket通信通知zygote进程fork一个新的进程出来；</p>
<h4 id="一-ServiceManager介绍"><a href="#一-ServiceManager介绍" class="headerlink" title="一. ServiceManager介绍"></a>一. ServiceManager介绍</h4><ul>
<li>serviceManager在android中是一个相当重要的进程跟zygoto是同级别的进程，这二个进程是相互监控的，当其中一个进程p掉了，系统就会重新启动，它的底层是用c,c++实现的，编译后的可执行文件是System/bin/servicemanager,对应的java层代码是ServiceManager,在java层中通jni引用了C层的服务；系统的这么多系统服务都是运行system/bin目录中的可执行文件运行起来的</li>
<li>系统重要的进程：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">目录</th>
<th style="text-align:center">系统</th>
<th style="text-align:center">进程名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">system/bin/adb</td>
<td style="text-align:center">adb</td>
<td style="text-align:center">adb</td>
</tr>
<tr>
<td style="text-align:left">system/bin/ app_process</td>
<td style="text-align:center">zygote</td>
<td style="text-align:center">app_process</td>
</tr>
<tr>
<td style="text-align:left">system/bin/ system_server</td>
<td style="text-align:center">system_server</td>
<td style="text-align:center">system_server</td>
</tr>
<tr>
<td style="text-align:left">system/bin/servicemanager</td>
<td style="text-align:center">servicemanager</td>
<td style="text-align:center">servicemanager</td>
</tr>
</tbody>
</table>
<ul>
<li><p>进程介绍：</p>
<p>app_process：这个就是zygote进程，专职用来孵化进程的，当开启一个新的app时就是这个进程进行开启的；系统中system_server进程也是它孵化</p>
<p>system_server：用于创建系统服务，管理服务；像AMS,WMS,PMS等就是在这个进程中进行实例化，并进行管理；</p>
<p>adb:就是常用的adb命令了</p>
<p>adb shell—&gt;su root—&gt;ps :可以查看到这些系统进程</p>
</li>
</ul>
<h4 id="二-源码分析"><a href="#二-源码分析" class="headerlink" title="二.源码分析"></a>二.源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/android/os/ServiceManager.<span class="function">java </span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> IServiceManager <span class="title">getIServiceManager</span><span class="params">()</span> &#123;</div><div class="line">        <span class="keyword">if</span> (sServiceManager != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> sServiceManager;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Find the service manager</span></div><div class="line">       sServiceManager=ServiceManagerNative.asInterface(BinderInternal.getContextObject());</div><div class="line">        <span class="keyword">return</span> sServiceManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addService</span><span class="params">(String name, IBinder service, <span class="keyword">boolean</span> allowIsolated)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            getIServiceManager().addService(name, service, allowIsolated);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"error in addService"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IBinder <span class="title">getService</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            IBinder service = sCache.get(name);</div><div class="line">            <span class="keyword">if</span> (service != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> service;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> getIServiceManager().getService(name);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"error in getService"</span>, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个类主要是提供服务和添加服务；这二个方法最终我们可以看到都是调用getIServiceManager方法来进行的，那这个方法是干嘛用的呢？其实这个方法是跟native原生方法进行通讯的，我们看下BinderInternal.getContextObject()方法,发现是个原生实现的，看注释我们知道，它返回了一个系统全局的context对象，它实现了IServiceManager接口，你可以通过它查找到其它的服务service</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">com/android/internal/os/BinderInternal.java </div><div class="line"><span class="comment">/**</span></div><div class="line">     * Return the global "context object" of the system.  This is usually</div><div class="line">     * an implementation of IServiceManager, which you can use to find</div><div class="line">     * other services.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">native</span> IBinder <span class="title">getContextObject</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>不像其它的Services大部分的实现体是java实现的，这个IServiceManager这个接口的实现类是底层的</p>
<p>C，C++实现的，所以getContextObject这个方法很关键，是它将java层的ServiceManager跟底层联系了起来；那么它底层的实现是又是怎么管理这些service的呢？其实它底层维护了一个服务向量表，这个在后面解释。</p>
<p>下面来看看在那里使用了ServiceManager类呢</p>
<p>我们来看下SystemServer这个类，这个类就是system_server进程的实现体；关于这个进程是怎么创建的在后面再说，首先它会调用main方法，来分析下这个类；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">/com/android/server/SystemServer.java</div><div class="line"></div><div class="line"> 	<span class="comment">/**</span></div><div class="line">     * The main entry point from zygote.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> SystemServer().run();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">       </div><div class="line">        <span class="keyword">if</span> (System.currentTimeMillis() &lt; EARLIEST_SUPPORTED_TIME) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"System clock is before 1970; setting to 1970."</span>);</div><div class="line">            SystemClock.setCurrentTimeMillis(EARLIEST_SUPPORTED_TIME);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!SystemProperties.get(<span class="string">"persist.sys.language"</span>).isEmpty()) &#123;</div><div class="line">            <span class="keyword">final</span> String languageTag = Locale.getDefault().toLanguageTag();</div><div class="line"></div><div class="line">            SystemProperties.set(<span class="string">"persist.sys.locale"</span>, languageTag);</div><div class="line">            SystemProperties.set(<span class="string">"persist.sys.language"</span>, <span class="string">""</span>);</div><div class="line">            SystemProperties.set(<span class="string">"persist.sys.country"</span>, <span class="string">""</span>);</div><div class="line">            SystemProperties.set(<span class="string">"persist.sys.localevar"</span>, <span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Here we go!</span></div><div class="line">        Slog.i(TAG, <span class="string">"Entered the Android system server!"</span>);</div><div class="line">        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_SYSTEM_RUN, SystemClock.uptimeMillis());</div><div class="line"></div><div class="line">       </div><div class="line">        SystemProperties.set(<span class="string">"persist.sys.dalvik.vm.lib.2"</span>, VMRuntime.getRuntime().vmLibrary());</div><div class="line"></div><div class="line">        <span class="comment">// Enable the sampling profiler.</span></div><div class="line">        <span class="keyword">if</span> (SamplingProfilerIntegration.isEnabled()) &#123;</div><div class="line">            SamplingProfilerIntegration.start();</div><div class="line">            mProfilerSnapshotTimer = <span class="keyword">new</span> Timer();</div><div class="line">            mProfilerSnapshotTimer.schedule(<span class="keyword">new</span> TimerTask() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    SamplingProfilerIntegration.writeSnapshot(<span class="string">"system_server"</span>, <span class="keyword">null</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;, SNAPSHOT_INTERVAL, SNAPSHOT_INTERVAL);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        VMRuntime.getRuntime().clearGrowthLimit();</div><div class="line">     	<span class="comment">//这里是进行设置虚拟机的大小，就是app占用内存的大小，超过这个值就会oom</span></div><div class="line">        VMRuntime.getRuntime().setTargetHeapUtilization(<span class="number">0.8f</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Some devices rely on runtime fingerprint generation, so make sure</span></div><div class="line">        <span class="comment">// we've defined it before booting further.</span></div><div class="line">        Build.ensureFingerprintProperty();</div><div class="line"></div><div class="line">        <span class="comment">// Within the system server, it is an error to access Environment paths without</span></div><div class="line">        <span class="comment">// explicitly specifying a user.</span></div><div class="line">        Environment.setUserRequired(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Ensure binder calls into the system always run at foreground priority.</span></div><div class="line">        BinderInternal.disableBackgroundScheduling(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Prepare the main looper thread (this thread).</span></div><div class="line">        android.os.Process.setThreadPriority(</div><div class="line">                android.os.Process.THREAD_PRIORITY_FOREGROUND);</div><div class="line">        android.os.Process.setCanSelfBackground(<span class="keyword">false</span>);</div><div class="line">     	</div><div class="line">        Looper.prepareMainLooper();</div><div class="line"></div><div class="line">        <span class="comment">// 加载系统服务需要的os库，一些服务是native实现的或者服务中的一些方法是native实现的</span></div><div class="line">        System.loadLibrary(<span class="string">"android_servers"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Check whether we failed to shut down last time we tried.</span></div><div class="line">        <span class="comment">// This call may not return.</span></div><div class="line">        performPendingShutdown();</div><div class="line"></div><div class="line">        <span class="comment">// Initialize the system context.</span></div><div class="line">        createSystemContext();</div><div class="line"></div><div class="line">        <span class="comment">// Create the system service manager.</span></div><div class="line">        mSystemServiceManager = <span class="keyword">new</span> SystemServiceManager(mSystemContext);</div><div class="line">        LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);</div><div class="line"></div><div class="line">        <span class="comment">// 这里是重点，在这些方法中进行了系统重要服务的创建启动等操作</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            startBootstrapServices();</div><div class="line">            startCoreServices();</div><div class="line">            startOtherServices();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">            Slog.e(<span class="string">"System"</span>, <span class="string">"******************************************"</span>);</div><div class="line">            Slog.e(<span class="string">"System"</span>, <span class="string">"************ Failure starting system services"</span>, ex);</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// For debug builds, log event loop stalls to dropbox for analysis.</span></div><div class="line">        <span class="keyword">if</span> (StrictMode.conditionallyEnableDebugLogging()) &#123;</div><div class="line">            Slog.i(TAG, <span class="string">"Enabled StrictMode for system server main thread."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Loop forever.</span></div><div class="line">        Looper.loop();</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在这个类中可以看到main方法中调用的run方法进行了一些系统初始化工作，如虚拟机headsize的设置</p>
<p>其实关键的是它进行了系统服务的创建，我们看下这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createSystemContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        ActivityThread activityThread = ActivityThread.systemMain();</div><div class="line">        mSystemContext = activityThread.getSystemContext();</div><div class="line">       mSystemContext.setTheme(android.R.style.Theme_DeviceDefault_Light_DarkActionBar);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>看方法名也知道它创建一了个context对象，以方便后面使用；</p>
<p>再看下startBootstrapServices()这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBootstrapServices</span><span class="params">()</span> </span>&#123;</div><div class="line">      </div><div class="line">        Installer installer = mSystemServiceManager.startService(Installer.class);</div><div class="line"></div><div class="line">        <span class="comment">// 著名的AMS服务，管理四个组件</span></div><div class="line">        mActivityManagerService = mSystemServiceManager.startService(</div><div class="line">                ActivityManagerService.Lifecycle.class).getService();</div><div class="line">        mActivityManagerService.setSystemServiceManager(mSystemServiceManager);</div><div class="line">        mActivityManagerService.setInstaller(installer);</div><div class="line"></div><div class="line">        mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);</div><div class="line"></div><div class="line">        <span class="comment">// Now that the power manager has been started, let the activity manager</span></div><div class="line">        <span class="comment">// initialize power management features.</span></div><div class="line">        mActivityManagerService.initPowerManagement();</div><div class="line"></div><div class="line">        <span class="comment">// Manages LEDs and display backlight so we need it to bring up the display.</span></div><div class="line">        mSystemServiceManager.startService(LightsService.class);</div><div class="line"></div><div class="line">        <span class="comment">// Display manager is needed to provide display metrics before package manager</span></div><div class="line">        <span class="comment">// starts up.</span></div><div class="line">        mDisplayManagerService = mSystemServiceManager.startService(DisplayManagerService.class);</div><div class="line"></div><div class="line">        <span class="comment">// We need the default display before we can initialize the package manager.</span></div><div class="line">        mSystemServiceManager.startBootPhase(SystemService.PHASE_WAIT_FOR_DEFAULT_DISPLAY);</div><div class="line"></div><div class="line">        <span class="comment">// Only run "core" apps if we're encrypting the device.</span></div><div class="line">        String cryptState = SystemProperties.get(<span class="string">"vold.decrypt"</span>);</div><div class="line">        <span class="keyword">if</span> (ENCRYPTING_STATE.equals(cryptState)) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Detected encryption in progress - only parsing core apps"</span>);</div><div class="line">            mOnlyCore = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ENCRYPTED_STATE.equals(cryptState)) &#123;</div><div class="line">            Slog.w(TAG, <span class="string">"Device encrypted - only parsing core apps"</span>);</div><div class="line">            mOnlyCore = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">       <span class="comment">//PMS服务</span></div><div class="line">        mPackageManagerService = PackageManagerService.main(mSystemContext, installer,</div><div class="line">                mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</div><div class="line">        mFirstBoot = mPackageManagerService.isFirstBoot();</div><div class="line">        mPackageManager = mSystemContext.getPackageManager();</div><div class="line"></div><div class="line">        Slog.i(TAG, <span class="string">"User Service"</span>);</div><div class="line">        ServiceManager.addService(Context.USER_SERVICE, UserManagerService.getInstance());</div><div class="line"></div><div class="line">        <span class="comment">// Initialize attribute cache used to cache resources from packages.</span></div><div class="line">        AttributeCache.init(mSystemContext);</div><div class="line"></div><div class="line">        <span class="comment">// Set up the Application instance for the system process and get started.</span></div><div class="line">        mActivityManagerService.setSystemProcess();</div><div class="line"></div><div class="line">        <span class="comment">// The sensor service needs access to package manager service, app ops</span></div><div class="line">        <span class="comment">// service, and permissions service, therefore we start it after them.</span></div><div class="line">        startSensorService();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>通过代码可以看到在这个方法中进行重要的AMS.PMS服务的创建启动，但我们可能会发现启动的服务并没有注册到ServiceManager中，让ServiceManager对这些服务进行管理，其实是ActivityManagerService类的setSystemProcess方法进行处理的，来看下这个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSystemProcess</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">      		<span class="comment">//下面这行代码就是将服务注册到ServiceManager中去的</span></div><div class="line">           ServiceManager.addService(Context.ACTIVITY_SERVICE, <span class="keyword">this</span>, <span class="keyword">true</span>);</div><div class="line">           ServiceManager.addService(ProcessStats.SERVICE_NAME, mProcessStats);</div><div class="line">           ServiceManager.addService(<span class="string">"meminfo"</span>, <span class="keyword">new</span> MemBinder(<span class="keyword">this</span>));</div><div class="line">           ServiceManager.addService(<span class="string">"gfxinfo"</span>, <span class="keyword">new</span> GraphicsBinder(<span class="keyword">this</span>));</div><div class="line">           ServiceManager.addService(<span class="string">"dbinfo"</span>, <span class="keyword">new</span> DbBinder(<span class="keyword">this</span>));</div><div class="line">           <span class="keyword">if</span> (MONITOR_CPU_USAGE) &#123;</div><div class="line">               ServiceManager.addService(<span class="string">"cpuinfo"</span>, <span class="keyword">new</span> CpuBinder(<span class="keyword">this</span>));</div><div class="line">           &#125;</div><div class="line">           ServiceManager.addService(<span class="string">"permission"</span>, <span class="keyword">new</span> PermissionController(<span class="keyword">this</span>));</div><div class="line">           ServiceManager.addService(<span class="string">"processinfo"</span>, <span class="keyword">new</span> ProcessInfoService(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">           ApplicationInfo info = mContext.getPackageManager().getApplicationInfo(</div><div class="line">                   <span class="string">"android"</span>, STOCK_PM_FLAGS);</div><div class="line">           mSystemThread.installSystemApplicationInfo(info, getClass().getClassLoader());</div><div class="line"></div><div class="line">           <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">               ProcessRecord app = newProcessRecordLocked(info, info.processName, <span class="keyword">false</span>, <span class="number">0</span>);</div><div class="line">               app.persistent = <span class="keyword">true</span>;</div><div class="line">               app.pid = MY_PID;</div><div class="line">               app.maxAdj = ProcessList.SYSTEM_ADJ;</div><div class="line">               app.makeActive(mSystemThread.getApplicationThread(), mProcessStats);</div><div class="line">               <span class="keyword">synchronized</span> (mPidsSelfLocked) &#123;</div><div class="line">                   mPidsSelfLocked.put(app.pid, app);</div><div class="line">               &#125;</div><div class="line">               updateLruProcessLocked(app, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">               updateOomAdjLocked();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                   <span class="string">"Unable to find android system package"</span>, e);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在方法的第一行我们就发现它将自己注册到ServiceManager中去了，同时我们也看到，这个方法中还注册了其它的许多服务，同理，其它的服务也是通过ServiceManager.addService()方法注册到ServiceManager中去的；服务是注册进去了，那是怎么拿出来来的，怎么提供给用户使用的呢？</p>
<p>看下ActivityManagerNative中的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class="line">       <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">         	<span class="comment">//这里通过名字将服务取出来了</span></div><div class="line">           IBinder b = ServiceManager.getService(<span class="string">"activity"</span>);</div><div class="line">           <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">               Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service binder = "</span> + b);</div><div class="line">           &#125;</div><div class="line">           IActivityManager am = asInterface(b);</div><div class="line">           <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">               Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service = "</span> + am);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> am;</div><div class="line">       &#125;</div><div class="line">   &#125;;</div></pre></td></tr></table></figure>
<p>可以看出来通过服务名字将服务取出来了，返回给了调用者</p>
<h4 id="三-ServiceManager-SystemServer-用户app-三者的关系"><a href="#三-ServiceManager-SystemServer-用户app-三者的关系" class="headerlink" title="三.ServiceManager,SystemServer,用户app,三者的关系"></a>三.ServiceManager,SystemServer,用户app,三者的关系</h4><p>说了这么多，可能对这者的关系及调用关系还不太理解，下面我们通过图形来解释下这三者的关系</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yoursite.com/2017/09/25/LayoutInflager%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(XmlPullParser parser, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (mConstructorArgs) &#123;</div><div class="line">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"inflate"</span>);</div><div class="line">            <span class="keyword">final</span> Context inflaterContext = mContext;</div><div class="line">            <span class="keyword">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class="line">            Context lastContext = (Context) mConstructorArgs[<span class="number">0</span>];</div><div class="line">            mConstructorArgs[<span class="number">0</span>] = inflaterContext;</div><div class="line">            View result = root;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// Look for the root node.</span></div><div class="line">                <span class="keyword">int</span> type;</div><div class="line">                <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class="line">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class="line">                    <span class="comment">// Empty</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(parser.getPositionDescription()</div><div class="line">                            + <span class="string">": No start tag found!"</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">final</span> String name = parser.getName();</div><div class="line">              <span class="comment">//单独遍历merge下的view，并添加到root中去</span></div><div class="line">                <span class="keyword">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class="line">                    <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(<span class="string">"&lt;merge /&gt; can be used only with a valid "</span></div><div class="line">                                + <span class="string">"ViewGroup root and attachToRoot=true"</span>);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    rInflate(parser, root, inflaterContext, attrs, <span class="keyword">false</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 生成普通元素View</span></div><div class="line">                    <span class="keyword">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class="line">                    ViewGroup.LayoutParams params = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</div><div class="line">                 <span class="comment">// 提取出root中的元素属性，如果attachToRoot为false，则添加这些属性到子view中去</span></div><div class="line">                        params = root.generateLayoutParams(attrs);</div><div class="line">                        <span class="keyword">if</span> (!attachToRoot) &#123;</div><div class="line">                            <span class="comment">// Set the layout params for temp if we are not</span></div><div class="line">                            <span class="comment">// attaching. (If we are, we use addView, below)</span></div><div class="line">                            temp.setLayoutParams(params);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// Inflate all children under temp against its context.</span></div><div class="line">                    rInflateChildren(parser, temp, attrs, <span class="keyword">true</span>);</div><div class="line">                    <span class="comment">// We are supposed to attach all the views we found (int temp)</span></div><div class="line">                    <span class="comment">// to root. Do that now.</span></div><div class="line">                  <span class="comment">//将view添加到root中去，并且使用root元素的属性</span></div><div class="line">                    <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; attachToRoot) &#123;</div><div class="line">                        root.addView(temp, params);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// Decide whether to return the root that was passed in or the</span></div><div class="line">                    <span class="comment">// top view found in xml.</span></div><div class="line">                    <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</div><div class="line">                        result = temp;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</div><div class="line">                <span class="keyword">final</span> InflateException ie = <span class="keyword">new</span> InflateException(e.getMessage(), e);</div><div class="line">                ie.setStackTrace(EMPTY_STACK_TRACE);</div><div class="line">                <span class="keyword">throw</span> ie;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">final</span> InflateException ie = <span class="keyword">new</span> InflateException(parser.getPositionDescription()</div><div class="line">                        + <span class="string">": "</span> + e.getMessage(), e);</div><div class="line">                ie.setStackTrace(EMPTY_STACK_TRACE);</div><div class="line">                <span class="keyword">throw</span> ie;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="comment">// Don't retain static reference on context.</span></div><div class="line">                mConstructorArgs[<span class="number">0</span>] = lastContext;</div><div class="line">                mConstructorArgs[<span class="number">1</span>] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>通过源码可以分析出这个方法的三个参数的作用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(@LayoutRes <span class="keyword">int</span> resource, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span></span></div></pre></td></tr></table></figure>
<p>第一个参数表示布局id文件</p>
<p>第二个参数表示要使用的根布局view，</p>
<p>第三个参数表示是否将解析的view最后添加到root中去</p>
<p>如果：第二个参数不为null,第三个参数为false,则解析的布局不会添加到root中去但解析view的根布局会使用root的属性元素，第二不为null,第三个参数为true,则将解析的布局添加到root中去并使用root元素中的属性</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发规范]]></title>
      <url>http://yoursite.com/2016/11/14/Android%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h5 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h5><ul>
<li>开发时jave类以及各种文件建议编码用UTF-8</li>
<li>java代码中建议不要出现中文，最多注释中可以出现中文,但建议最好都不用中文</li>
<li>类中public方法在前，private在后，所有不对外的方法，变量全部使用private修饰符。<a id="more"></a></li>
<li>类中public static final的常量在最上方，其次private static final，然后public，private等。</li>
<li>类中定义的接口放在变量声明之后，所有方法之前。</li>
<li>方法相关性，方法之间有调用关系的，按照先后顺序排列在一起。</li>
<li>善用空行，方法体之间必须空行，代码逻辑块之间使用空行分隔，变量声明根据变量类型适当空行。</li>
<li>方法体不要过长，尽量提取小方法代替逻辑块，保证代码可读性。</li>
<li>善用TODO，对于未完成或已完成但是方案不完美需后续跟踪的，使用TODO标签标示，并写好注释。</li>
<li>不建议注释太多，要通过方法名，变量名提高代码可读性，而非注释。但是一些非常规方法，复杂逻辑，需要详细注释说明。</li>
<li>协作中，不要做整个代码的格式化，仅格式化自己编写的那部分。</li>
<li>注意命名以及注释英文单词，不要写错~</li>
<li>杜绝“Magic Number”, 所有数值根据情况提取为常量，dimen或constant。</li>
</ul>
<h5 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h5><ol>
<li>Java命名<br><img src="/images/android_call_name.png" alt="">  </li>
<li>资源命名  </li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">分类</th>
<th style="text-align:right">命名方式</th>
<th style="text-align:center">举例</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Layout</td>
<td style="text-align:right">全小写，单词下划线分隔，中间用功能模块区分；如：activity:activity_功能模块_名称；Fragment:fragment_功能模块_名称；ListView:item_list_功能模块_名称；RecycleView:item_recycle_功能模块_名称；自定义view：custom_view_功能模块_名称;PopWind：pop_功能模块_名称；其他被include的或公用组件，诸如title_bar,bottom_bar,根据实际含义命名</td>
<td style="text-align:center">activity_home_main.xml</td>
<td style="text-align:center">所有的命名都按照：控件名或逻辑名_功能模块_名称</td>
</tr>
<tr>
<td style="text-align:left">Drawable</td>
<td style="text-align:right">全小写，单词下划线分隔，中间用功能模块区分</td>
<td style="text-align:center">btn_home_bg.png</td>
<td style="text-align:center">根据图片使用方式命名， 图标以image_开头，背景以_bg结尾，状态drawable xml以_selector结尾</td>
</tr>
<tr>
<td style="text-align:left">Color</td>
<td style="text-align:right">全小写，单词下划线分隔</td>
<td style="text-align:center">green</td>
<td style="text-align:center">尽量根据颜色值命名</td>
</tr>
<tr>
<td style="text-align:left">String</td>
<td style="text-align:right">全小写，单词下划线分隔</td>
<td style="text-align:center">app_name</td>
<td style="text-align:center">模块多且大的话，根据模块建立不同的String xml 文件</td>
</tr>
<tr>
<td style="text-align:left">Dimension</td>
<td style="text-align:right">全小写，单词下划线分隔</td>
<td style="text-align:center">left_padding</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">Id</td>
<td style="text-align:right">全小写，单词下划线分隔</td>
<td style="text-align:center">user_name_tv</td>
<td style="text-align:center">详细id命名规范参考以下章节</td>
</tr>
</tbody>
</table>
<ol>
<li>布局文件中View的缩写  </li>
</ol>
<table>
<thead>
<tr>
<th>View</th>
<th>结尾命名规则</th>
</tr>
</thead>
<tbody>
<tr>
<td>TextView</td>
<td>tv</td>
</tr>
<tr>
<td>Button</td>
<td>btn</td>
</tr>
<tr>
<td>EditText</td>
<td>edit</td>
</tr>
<tr>
<td>ImageView</td>
<td>image</td>
</tr>
<tr>
<td>ImageButton</td>
<td>image_btn</td>
</tr>
<tr>
<td>RadioButton</td>
<td>radio_btn</td>
</tr>
<tr>
<td>RadioGroup</td>
<td>radio_gp</td>
</tr>
<tr>
<td>SeekBar</td>
<td>seek</td>
</tr>
<tr>
<td>ProgressBar</td>
<td>progress</td>
</tr>
<tr>
<td>Spinner</td>
<td>spinner</td>
</tr>
<tr>
<td>VideoView</td>
<td>video</td>
</tr>
<tr>
<td>CheckBox</td>
<td>check</td>
</tr>
<tr>
<td>ListView</td>
<td>list</td>
</tr>
<tr>
<td>GridView</td>
<td>grid</td>
</tr>
<tr>
<td>RecycleView</td>
<td>recycle</td>
</tr>
<tr>
<td>Layout</td>
<td>layout</td>
</tr>
</tbody>
</table>
<h5 id="其它规范"><a href="#其它规范" class="headerlink" title="其它规范"></a>其它规范</h5><p>Gradle引入第三方库时在read.md文件中加上库地址并说明库的作用.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo及Markdown的使用]]></title>
      <url>http://yoursite.com/2016/11/14/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h5 id="Hexo的使用"><a href="#Hexo的使用" class="headerlink" title="Hexo的使用"></a>Hexo的使用</h5><ul>
<li>Hexo常用的命令  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hexo new page [页面名]:新建页面</div><div class="line">hexo new [文章名]:新建文章名   </div><div class="line">hexo g(generate) ：生成静态文件   </div><div class="line">hexo d(deploy)：部署</div><div class="line">hexo clean :清空</div><div class="line">hexo s --debug :debug模式，在浏览器中输入：http://localhost:4000 可查看</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>  
<ul>
<li>Hexo使用过程中注意事项<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo中修改配置文件时要注意在[:]之后空一格再输入键值</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="Markdown的使用"><a href="#Markdown的使用" class="headerlink" title="Markdown的使用"></a>Markdown的使用</h5><ul>
<li>Markdown语法<br><a href="http://xianbai.me/learn-md/article/syntax/lists.html" target="_blank" rel="external">Markdown</a>  </li>
<li>注意事项  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Markdown中的换行：二个空格加回车或者用&lt;br/&gt;</div><div class="line">Markdwon中的代码高亮：用&quot; ```代码``` &quot;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim编辑器的使用]]></title>
      <url>http://yoursite.com/2016/08/22/Vim%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h5 id="Vim简介"><a href="#Vim简介" class="headerlink" title="Vim简介"></a>Vim简介</h5><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具<br><a id="more"></a></p>
<h5 id="Vim的工作模式"><a href="#Vim的工作模式" class="headerlink" title="Vim的工作模式"></a>Vim的工作模式</h5><p>基本上 vi/vim 共分为三种模式，分别是一般模式、编辑模式与指令列命令模式。 这三种模式的作用分别是:  </p>
<ol>
<li>一般模式：<br>以 vi 打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中， 你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、贴上』来处理你的文件数据  </li>
<li>编辑模式：<br>在一般模式中可以进行删除、复制、贴上等等的动作，但是却无法编辑文件内容的！ 要等到你按下『i, I, o, O, a, A, r, R』等任何一个字母之后才会进入编辑模式。注意了！通常在 Linux 中，按下这些按键时，在画面的左下方会出现『INSERT 或 REPLACE 』的字样，此时才可以进行编辑。而如果要回到一般模式时， 则必须要按下『Esc』这个按键即可退出编辑模式  </li>
<li>指令列命令模式：<br>在一般模式当中，输入『 : / ? 』三个中的任何一个按钮，就可以将光标移动到最底下那一行。在这个模式当中， 可以提供你『搜寻资料』的动作，而读取、存盘、大量取代字符、离开 vi 、显示行号等等的动作则是在此模式中达成的<br>简单的说，我们可以将这三个模式想成底下的图标来表示:<br><img src="/images/vim_model.png" alt=""></li>
</ol>
<h5 id="Vim按键说明"><a href="#Vim按键说明" class="headerlink" title="Vim按键说明"></a>Vim按键说明</h5><ol>
<li><p>一般模式可用的按钮说明，光标移动、复制粘贴、搜寻取代等<br>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格<br>「ctrl」+「b」：屏幕往“后”移动一页<br>「ctrl」+「f」：屏幕往“前”移动一页<br>「ctrl」+「u」：屏幕往“后”移动半页<br>「ctrl」+「d」：屏幕往“前”移动半页<br>「ctrl+$」：移动到光标所在行的“行尾”<br>「ctrl+^」：移动到光标所在行的“行首”<br>「w」：光标跳到下个字的开头<br>「e」：光标跳到下个字的字尾<br>「b」：光标回到上个字的开头<br>「#l」：光标移到该行的第#个位置，如：5l,56l<br>查找关键字：<br>「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止<br>「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往前寻找到您要的关键字为止<br>跳到文件中的某一行：<br>「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行<br>删除：<br>「x」：每按一次，删除光标所在位置的“后面”一个字符<br>「#x」：例如，「6x」表示删除光标所在位置的“后面”6个字符<br>「X」：大写的X，每按一次，删除光标所在位置的“前面”一个字符<br>「#X」：例如，「20X」表示删除光标所在位置的“前面”20个字符<br>「dd」：删除光标所在行<br>「#dd」：从光标所在行开始删除#行<br>复制与粘贴：<br>「yw」：将光标所在之处到字尾的字符复制到缓冲区中<br>「#yw」：复制#个字到缓冲区<br>「yy」：复制光标所在行到缓冲区<br>「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字<br>「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能</p>
</li>
<li><p>一般模式切换到编辑模式的可用的按钮说明<br>[i]：进入插入编辑模式，用户可以对文件进行编辑修改<br>[ESC]：退出编辑模式，进入一般模式</p>
</li>
<li><p>一般模式切换到指令列模式的可用的按钮说明<br>「w」：在冒号输入字母「w」就可以将文件保存起来<br>「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi<br>「qw」：保存文件并退出，搭配「w」一起使用，这样在退出的时候还可以保存文件<br>[q!]：若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案</p>
</li>
<li><p>vim 环境的变更，在一般模式下输入[:]再输入<br>[set nu]：显示行号，设定之后，会在每一行的前缀显示该行的行号<br>[set nonu]：与 set nu 相反，为取消行号！</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux学习及常用命令]]></title>
      <url>http://yoursite.com/2016/08/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h5 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h5><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。<br>Linux能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统<br><a id="more"></a></p>
<h5 id="Linux知识点"><a href="#Linux知识点" class="headerlink" title="Linux知识点"></a>Linux知识点</h5><ol>
<li><p>Linux目录结构<br><img src="/images/003vPl7Rty6E8kZRlAEdc690.jpg" alt=""><br>/bin: bin是Binary的缩写, 这个目录存放着最经常使用的命令<br>/boot: 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件<br>/dev: dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的<br>/etc: 这个目录用来存放所有的系统管理所需要的配置文件和子目录<br>/home: 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的<br>/lib:  这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件,几乎所有的应用程序都需要用到这些共享库<br>/lost+found: 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件<br>/mnt: 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了<br>/opt:  这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的<br>/proc: 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息,这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件<br>/root: 该目录为系统管理员，也称作超级权限者的用户主目录<br>/sbin:  s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序<br>/selinux: 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的<br>/srv: 该目录存放一些服务启动之后需要提取的数据<br>/tmp: 这个目录是用来存放一些临时文件的<br>/usr: 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录<br>/usr/bin: 系统用户使用的应用程序<br>/usr/sbin: 超级用户使用的比较高级的管理程序和系统守护程序<br>/usr/src: 内核源代码默认的放置目录<br>/var: 这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下,包括各种日志文件<br>在linux系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件,/etc：这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动;/bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的;值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令;/var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里</p>
</li>
<li><p>Linux文件属性<br>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定;<br><img src="/images/563F12FF-7CD8-4584-9130-45D1A584D83D.png" alt=""><br><img src="/images/363003_1227493859FdXT.png" alt=""><br>从左至右用0-9这些数字来表示,第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限;第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限;其中，第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限;第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；第3、6、9位表示可执行权限,如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。<br>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。在以上实例中，bin文件是一个目录文件，属主和属组都为root，属主有可读、可写、可执行的权限；与属主同组的其他用户有可读和可执行的权限；其他用户也有可读和可执行的权限<br>Linux文件属性有两种设置方法，一种是数字，一种是符号<br>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。<br>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：<br>r:4<br>w:2<br>x:1<br>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：<br>owner = rwx = 4+2+1 = 7<br>group = rwx = 4+2+1 = 7<br>others= — = 0+0+0 = 0<br>所以等一下我们设定权限的变更时，该文件的权限数字就是770啦！变更权限的指令chmod的语法是这样的:  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">chmod [-R] xyz :修改文件属性</div><div class="line">xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加</div><div class="line">-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更</div><div class="line">eg: chmod -R 777 lidaofu 将lidaofu目录下的权限全部启用</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">touch [args]:创建一个新文件</div><div class="line">eg: touch &quot;lidaofu.txt&quot;:创建一个lidaofu.txt的文件</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">man [args]:显示指定命令的帮助信息</div><div class="line">eg: man ls:显示ls命令的帮助信息</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat [options:-n] [args]:显示文件的内容,参数n表示显示行号</div><div class="line">eg: cat -n /user/lidaofu.txt:显示lidaofu.txt这个文件并显示行号</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ls [options:-a,-l,-d,-t,-R][args]:显示指定目录</div><div class="line">-a（all):显示所有的文件和子目录，包括隐藏文件和隐藏子目录  </div><div class="line">-l（list):显示文件和子目录的列表信息</div><div class="line">-d（directory):如果参数是目录，只显示目录的信息</div><div class="line">-t（time):按照时间顺序显示文件</div><div class="line">-R（recursive):不仅显示指定目录下的文件和子目录信息，而且递归地显示子目录中的文件和子目录信息</div><div class="line">eg: ls -al /home :显示home目录下的所有文件，包含隐藏的文件</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp [args1] [args2]:复制文件</div><div class="line">eg: cp haproxy-1.4.24.tar.gz /usr/src/ 将文件复制到/usr/src目录下</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rm [options][args]:删除文件或目录</div><div class="line">-d或--directory:直接把欲删除的目录的硬连接数据删成0，删除该目录。</div><div class="line">-f或--force:强制删除文件或目录。</div><div class="line">-r或-R或--recursive:递归处理，将指定目录下的所有文件及子目录一并处理。</div><div class="line">-i或--interactive:删除既有文件或目录之前先询问用户。</div><div class="line">-v或--verbose: 显示指令执行过程</div><div class="line">eg: rm haproxy-1.4.24.tar.gz 删除文件</div><div class="line">eg: rm -rf /lidaofu/test 强制删除test目录及子文件</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd [args]:改变工作目录</div><div class="line">cd .. : 切换到父目录</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir [args]:创建目录</div><div class="line">eg: mkdir /lidaofu/test </div><div class="line">eg: mkdir -p /lidaofu/test/a 新建多级不存在的目录</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pwd :显示当前目录的绝对路径</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig :显示网络接口信息</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su :变更用户身份</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[加密技术]]></title>
      <url>http://yoursite.com/2016/08/21/%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><blockquote>
<p>对称加密算法是应用较早的加密算法，技术成熟。在对称加密算法中，数据发信方将明文（原始数据）和加密密钥一起经过特殊加密算法处理后，使其变成复杂的加密密文发送出去。收信方收到密文后，若想解读原文，则需要使用加密用过的密钥及相同算法的逆算法对密文进行解密，才能使其恢复成可读明文。在对称加密算法中，使用的密钥只有一个，发收信双方都使用这个密钥对数据进行加密和解密，这就要求解密方事先必须知道加密密钥。<br><a id="more"></a></p>
<ul>
<li>对称加密算法的特点是算法公开、计算量小、加密速度快、加密效率高</li>
<li>不足之处是，交易双方都使用同样钥匙，安全性得不到保证</li>
<li>常见加密算法，DES,AES,3DES,TDEA等<br><img src="http://oc3lx6w3r.bkt.clouddn.com/BB49DD66-557E-4099-9A69-AFDF074673B0.png" alt="pic"></li>
</ul>
</blockquote>
<h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><blockquote>
<p>对称加密算法在加密和解密时使用的是同一个秘钥；而非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）</p>
<ul>
<li>非对称加密与对称加密相比，其安全性更好</li>
<li>非对称加密的缺点是加密和解密花费时间长、速度慢，只适合对少量数据进行加密</li>
<li>常见算法，RSA、Elgamal、背包算法、Rabin、D-H、ECC等</li>
</ul>
</blockquote>
<h4 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h4><blockquote>
<ul>
<li>定义：单向散列函数算法也称Hash(哈希)算法，是一种将任意长度的消息压缩到某一固定长度(消息摘要)的函数(该过程不可逆)。Hash函数可用于数字签名，消息的完整性检测，消息起源的认证检测等</li>
<li>易变性：即使原始信息发生1bit的变化，hash的输出也将会有不可预知的巨大变化</li>
<li>不可逆性：通过Hash结果构造出满足的输入信息是不可能的或者及其困难的</li>
<li>常见的散列算法：MD5,SHA,RIPE-MD,HAVAL,N-Hash等</li>
<li>MD5：消息摘要算法，它对输入的做任意长度的消息进行运算，产生一个128位的消息摘要</li>
<li>SHA：安全散列算法，有SHA-1,SHA-256,SHA-384,SHA-512几种，分别产生160位，256位，384位，512位的散列值</li>
<li>Hash算法的应用场景：防篡改，防损坏，认证,电子签名等</li>
</ul>
<ol>
<li>防篡改<br><img src="http://oc3lx6w3r.bkt.clouddn.com/876260C1-8B27-476B-8398-F0FC4FFC5154.png" alt="pic"></li>
<li>防损坏<br><img src="http://oc3lx6w3r.bkt.clouddn.com/72BC06A9-3699-4853-9BA3-A78A9CE1A6E1.png" alt="pic"></li>
<li>认证<br><img src="http://oc3lx6w3r.bkt.clouddn.com/646C55D3-9F9E-4FAF-8370-28A75A9F3CB5.png" alt="pic"></li>
<li>电子签名<br><img src="http://oc3lx6w3r.bkt.clouddn.com/64B17681-BCB9-49AA-BD3E-C877544E6533.png" alt="pic"><br><img src="http://oc3lx6w3r.bkt.clouddn.com/A14D0EC1-B744-4031-A906-67FC3ADD6DF1.png" alt="pic"></li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[三大修复框架比较及DroidFix热修复框架的使用]]></title>
      <url>http://yoursite.com/2016/08/19/DroidFix%E7%83%AD%E4%BF%AE%E5%A4%8D%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h5 id="热修复框架的比较"><a href="#热修复框架的比较" class="headerlink" title="热修复框架的比较"></a>热修复框架的比较</h5><ol>
<li>热修复作为当下热门的技术，在业界内比较著名的有阿里巴巴的AndFix、Dexposed，腾讯QQ空间的超级补丁和微信的Tinker。</li>
<li>QQ空间的超级补丁热修复框架DroidFix<br>超级补丁技术基于DEX分包方案，使用了多DEX加载的原理，大致的过程就是：把BUG方法修复以后，放到一个单独的DEX里，插入到dexElements数组的最前面，让虚拟机去加载修复完后的方法。  <a id="more"></a>
<img src="/images/201609121023174918.png" alt=""><br>当patch.dex中包含Test.class时就会优先加载，在后续的DEX中遇到Test.class的话就会直接返回而不去加载，这样就达到了修复的目的.<br>整体的流程图如下：<br><img src="/images/201609121023194439.png" alt=""><br>优势:<br>没有合成整包(和微信Tinker比起来)，产物比较小，比较灵活;<br>可以实现类替换，兼容性高。(某些三星手机不起作用);<br>不足:<br>不支持即时生效，必须通过重启才能生效;<br>为了实现修复这个过程，必须在应用中加入两个dex!dalvikhack.dex中只有一个类，对性能影响不大，但是对于patch.dex来说，修复的类到了一定数量，就需要花不少的时间加载。对手淘这种航母级应用来说，启动耗时增加2s以上是不能够接受的事;<br> 在ART模式下，如果类修改了结构，就会出现内存错乱的问题。为了解决这个问题，就必须把所有相关的调用类、父类子类等等全部加载到patch.dex中，导致补丁包异常的大，进一步增加应用启动加载的时候，耗时更加严重;</li>
</ol>
<ol>
<li><p>微信热修复框架Tinker<br>微信针对QQ空间超级补丁技术的不足提出了一个提供DEX差量包，整体替换DEX的方案。主要的原理是与QQ空间超级补丁技术基本相同，区别在于不再将patch.dex增加到elements数组中，而是差量的方式给出patch.dex，然后将patch.dex与应用的classes.dex合并，然后整体替换掉旧的DEX文件，以达到修复的目的<br><img src="/images/201609121023195399.png" alt=""><br>整体流程如下：<br><img src="/images/201609121023206650.png" alt=""><br>优势：<br>合成整包，不用在构造函数插入代码，防止verify，verify和opt在编译期间就已经完成，不会在运行期间进行;<br>性能提高。兼容性和稳定性比较高;<br>开发者透明，不需要对包进行额外处理;<br>不足:<br>与超级补丁技术一样，不支持即时生效，必须通过重启应用的方式才能生效;<br>需要给应用开启新的进程才能进行合并，并且很容易因为内存消耗等原因合并失败;<br>合并时占用额外磁盘空间，对于多DEX的应用来说，如果修改了多个DEX文件，就需要下发多个patch.dex与对应的classes.dex进行合并操作时这种情况会更严重，因此合并过程的失败率也会更高</p>
</li>
<li><p>阿里热修复框架HotFix<br>阿里百川推出的热修复HotFix服务，相对于QQ空间超级补丁技术和微信Tinker来说，定位于紧急BUG修复的场景下，能够最及时的修复BUG，下拉补丁立即生效无需等待;AndFix不同于QQ空间超级补丁技术和微信Tinker通过增加或替换整个DEX的方案，提供了一种运行时在Native修改Filed指针的方式，实现方法的替换，达到即时生效无需重启，对应用无性能消耗的目的<br><img src="/images/201609121023210430.png" alt=""><br><img src="/images/201609121023212020.png" alt=""><br>优势:<br>BUG修复的即时性;<br>补丁包同样采用差量技术，生成的PATCH体积小;<br>对应用无侵入，几乎无性能损耗<br>不足:<br>不支持新增字段，以及修改<init>方法，也不支持对资源的替换;<br>由于厂商的自定义ROM，对少数机型暂不支持;</init></p>
</li>
</ol>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>QQ空间超级补丁技术和微信Tinker 支持新增类和资源的替换，在一些功能化的更新上更为强大，但对应用的性能和稳定会有的一定的影响;阿里百川HotFix虽然暂时不支持新增类和资源的替换，对新功能的发布也有所限制，但是作为一项定位为线上紧急BUG的热修复的服务来说，能够真正做到BUG即时修复用户无感知，同时保证对应用性能不产生不必要的损耗，在热修复方面不失为一个好的选择</p>
<h5 id="热修复的一些问题"><a href="#热修复的一些问题" class="headerlink" title="热修复的一些问题"></a>热修复的一些问题</h5><ol>
<li>多DEX带来的性能影响，启动时间过长<br>我们知道，多DEX方案原来是用于解决应用方法数65k的问题，现在google也官方支持了MultiDex的实现方案。超级补丁技术和Tinker却作为一种热修复的方案，平生给应用增加了多个DEX，而多DEX技术最大的问题在于性能上的坑，因此基于这种方案的补丁技术影响应用的性能是无疑的；<br>我们可以看到，超级补丁技术和Tinker都选择在Application的attachBaseContext()进行补丁dex的加载，即时这是加载dex的最佳时机，但是依然会带来很大的性能问题，首当其冲的就是启动时间太长<br>对于补丁DEX来说，应用启动时虚拟机会进行dexopt操作，将patch.dex文件转换成odex文件，这个过程本身非常耗时。而这个过程又要求在主线程中，以同步的方式执行，否则无法成功进行修复 </li>
<li>易造成应用的ANR和Crash<br>由于多DEX加载导致了启动时间变长，这样更容易引发应用的ANR。我们知道当应用在主线程等待超过5s以后，就会直接导致长时间无响应而退出。超级补丁技术为保证ART不出现地址错乱问题，需要将所有关联的类全部加入到补丁中，而微信Tinker采取一种差量包合并加载的方式，都会使要加载的DEX体积变得很大。这也很大程度上容易导致ANR情况的出现；<br>除了应用ANR以外，多DEX模式也同样很容易导致Crash情况的出现。在ART设备中为了保证不出现地址错乱，需要把修改类的所有相关类全部加入到补丁中，这里会出现一个问题，为了保证补丁包的体积最小，能否保证引入全部的关联类而不引入无关的类呢?一旦没有引入关联的类，就会出现以下的异常；<br>· NoClassDefFoundError<br>· Could Not Find Class<br>· Could Not Find Method<br>出现这些异常，就会直接导致应用的Crash退出。<br>所以，不难看出如果我们需要修复一个不是Crash的BUG，但是因为未加入相关类而导致了更严重的Crash，就更加的得不偿失  </li>
</ol>
<h5 id="DroidFix热修复框架的使用"><a href="#DroidFix热修复框架的使用" class="headerlink" title="DroidFix热修复框架的使用"></a>DroidFix热修复框架的使用</h5><ol>
<li>Clone框架并将相应的库配置到项目中<br><img src="http://oc3lx6w3r.bkt.clouddn.com/478DADCB-2EFF-4438-84E3-6199BEC30BE8.png" alt="Andrid"></li>
<li>配置工程build.gradle,将DroidFix项目中的build.gradle中的相关的配置复制到自己项目中<br><img src="http://oc3lx6w3r.bkt.clouddn.com/FD8BDC36-4C67-490F-848F-092409D6BF51.png" alt="Android"></li>
<li>生成apk文件,打正式包时选择release，打包完成会生成一个DroidPatch文件夹，里面包含有classes.md5.txt,mapping.txt二个文件，这二个文件是在打修复包时会用到，这二个文件要注意保留，因为打修复包是根据这二个文件中的配置来生成patch.apk文件的<br><img src="http://oc3lx6w3r.bkt.clouddn.com/91EA3E5F-114D-46F9-BF15-16BFBDE579ED.png" alt="Android"><br><img src="http://oc3lx6w3r.bkt.clouddn.com/50FAF365-CB2E-4AB1-9F8B-F5C9F0373EC5.png" alt="Android"></li>
<li>打修复包，此时生成的patch.apk文件就热修复的apk，将其放在服务器上然后下载下来就可使用<br><img src="http://oc3lx6w3r.bkt.clouddn.com/74045503-F120-4D4D-B3A5-7775508A436F.png" alt="Android"></li>
<li>在application中加入相应的代码，在打开app时跟后台交互查看些版本的app是否有patch.apk文件，有则下载下来当下次再打开app时就会加载patch.apk文件到内存，以此达到修复bug的文件<br><img src="http://oc3lx6w3r.bkt.clouddn.com/923308A8-48DE-4C1F-9C0B-3018ECABEBD0.png" alt="Android"></li>
<li>注意事项<br>此修复办法只能在再次打开app时生效，所以如果用户在一打开app就崩溃时是无法达到修复目的的，因为patch.apk文件还没下载到本地;<br>此修复只能针对java文件，不能对资源文件进行修复</li>
</ol>
<h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ol>
<li><a href="https://zhuanlan.zhihu.com/p/20308548" target="_blank" rel="external">热修复原理</a></li>
<li><a href="https://github.com/bunnyblue/DroidFix" target="_blank" rel="external">DroidFix框架</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android单元测试]]></title>
      <url>http://yoursite.com/2016/08/19/Android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h4 id="Android中的单元测试"><a href="#Android中的单元测试" class="headerlink" title="Android中的单元测试"></a>Android中的单元测试</h4><p>在Android Studio中进行单元测试并不需要什么插件或者过多的配置，Android Studio本身就集成了测试环境，无论是单纯的java代码单元测试还是依赖Android SDK的Android代码单元测试，都能得心应手<br><a id="more"></a><br><img src="http://oc3lx6w3r.bkt.clouddn.com/79FE0BB0-EDE3-4487-A1FF-B5142494FC53.png" alt="Android"><br><img src="http://oc3lx6w3r.bkt.clouddn.com/C56013ED-24A1-49D0-9AA5-02D544B940BF.png" alt="Android"></p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://www.codeceo.com/article/android-studio-unit-test.html" target="_blank" rel="external">Android测试</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Adb常用命令]]></title>
      <url>http://yoursite.com/2016/08/18/Adb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="adb-shell常用命令"><a href="#adb-shell常用命令" class="headerlink" title="adb shell常用命令"></a>adb shell常用命令</h3><a id="more"></a>
<p>首先通过连接手机通过adb shell命令进入到shell环境<br><img src="http://oc3lx6w3r.bkt.clouddn.com/AB5335A2-111E-46F9-9ED5-0A8EDD64C4CD.png" alt="adb_shell"></p>
<p>1.adb shell ps:查看进程信息<br><img src="http://oc3lx6w3r.bkt.clouddn.com/FFBA38ED-F64A-4B7A-A5B0-4E25BC2A0219.png" alt="adb_shell"></p>
<p>2.adb shell service list:查看后台运行的所有服务<br><img src="http://oc3lx6w3r.bkt.clouddn.com/960AA3B8-0FC7-4E61-BFC9-69FE216F8C5D.png" alt="adb_shell"></p>
<p>3.adb shell dumpsys [options] ：输出options的信息<br>通过service list查看到后台运行的服务后再通过dumpsys 服务 来查看服务信息<br>常用的一般是dumpsys activity top 命令来查看正在运行的app信息<br><img src="http://oc3lx6w3r.bkt.clouddn.com/F975F70B-993D-4EB8-B5BA-F193F8386253.png" alt="adb"><br><img src="http://oc3lx6w3r.bkt.clouddn.com/D98CEE0D-783A-4B7E-ADA0-BF3D6FF67F20.png" alt="adb_shell"><br>4.adb shell screen cap <filename>:截屏，将图片存储在filename文件夹下<br><img src="http://oc3lx6w3r.bkt.clouddn.com/3DE79171-1AC4-44E9-9FD4-1F3D35730357.png" alt="adb_shell"><br>5.adb shell pm list packages [options]:查看包名<br>-f:所有安装的app包名<br>-s:安装的系统包名<br>-i:已经安装的app包名<br>-u:安装和未安装的所有app包名<br><img src="http://oc3lx6w3r.bkt.clouddn.com/79D93CD5-3FE5-4D00-9182-E5FDD8A4FF01.png" alt="adb_shell"><br><img src="http://oc3lx6w3r.bkt.clouddn.com/F884B2AD-296F-41C4-8613-054C9D1971C2.png" alt="adb"><br>6.adb shell pm clear <package>:清除package所属的app的所有数据<br><img src="http://oc3lx6w3r.bkt.clouddn.com/EF645A0A-9A09-4FC7-8847-FA9629B2E75C.png" alt="adb_shell"><br>7.adb shell pm path <package>:显示package所属app所在的路径<br><img src="http://oc3lx6w3r.bkt.clouddn.com/2156226B-8C53-4EDC-8A92-18A675D8B80C.png" alt="adb_shell"><br>8.adb shell的其它命令与linux的一些命令的使用方法一样，因为android是基于linux开发的<br><img src="http://oc3lx6w3r.bkt.clouddn.com/E7E4AADE-2AB2-4FD6-A7B2-9A08B642C36B.png" alt="adb_shell"><br>9.monkey:压力测试<br>-p:测试的包名<br>-v:是否打印测试信息<br><img src="http://oc3lx6w3r.bkt.clouddn.com/BE770E2C-99F5-4809-BF08-D7A34601F294.png" alt="adb"></package></package></filename></p>
<h3 id="adb常用命令"><a href="#adb常用命令" class="headerlink" title="adb常用命令"></a>adb常用命令</h3><p>1.adb  install 安装apk<br><img src="http://oc3lx6w3r.bkt.clouddn.com/E5C159D0-B150-4113-8951-0AF02EDF9A8A.png" alt="adb"><br>2.adb uninstall 删除apk<br><img src="http://oc3lx6w3r.bkt.clouddn.com/786B6986-E2F4-4F9A-B792-0B69C59FCB97.png" alt="adb"><br>3.adb pull 手机中的文件拉取到电脑<br><img src="http://oc3lx6w3r.bkt.clouddn.com/111B3B31-4BEE-42D7-884F-AC7A49E4DE59.png" alt="adb"><br>4.adb push 将电脑的文件推送到手机<br><img src="http://oc3lx6w3r.bkt.clouddn.com/EC34842B-800C-442B-9B38-2A5A01E8DE8A.png" alt="adb"></p>
<h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><p>1.su 切换用户模式<br><img src="http://oc3lx6w3r.bkt.clouddn.com/C07FE704-C730-4C22-A13F-1DC5B771F215.png" alt="adb"><br>2.adb pull/push 权限拒绝问题<br>需要将相应的读写权限给相应的文件<br><img src="http://oc3lx6w3r.bkt.clouddn.com/CF08D1F4-981F-41BF-9412-15B8A1B0652A.png" alt="adb"><br>3.某些情况下，apk卸载后无法安装时<br><img src="http://oc3lx6w3r.bkt.clouddn.com/614BACFF-8A38-470E-85A4-C907F5560083.png" alt="adb"><br><img src="http://oc3lx6w3r.bkt.clouddn.com/086D46A1-CCB3-4603-BEF3-529815722D1E.png" alt="adb"><br>4.使用命令行进行apk签名<br><img src="http://oc3lx6w3r.bkt.clouddn.com/509F0CD9-428B-4FA2-A882-EF0BF490ED17.png" alt="adb"></p>
<h5 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h5><ol>
<li><a href="http://adbshell.com" target="_blank" rel="external">adb shell</a></li>
<li><a href="https://www.zhihu.com/question/21074979/answer/18176410" target="_blank" rel="external">root原理</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android相关导图]]></title>
      <url>http://yoursite.com/2016/08/18/Android%E7%9B%B8%E5%85%B3%E5%AF%BC%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h3 id="1-View手势"><a href="#1-View手势" class="headerlink" title="1. View手势"></a>1. View手势</h3><a id="more"></a>
<p><img src="http://oc3lx6w3r.bkt.clouddn.com/88d558d78d5f6716.jpg" alt="view_url"></p>
<h3 id="2-View的坐标及位置"><a href="#2-View的坐标及位置" class="headerlink" title="2. View的坐标及位置"></a>2. View的坐标及位置</h3><p><img src="http://oc3lx6w3r.bkt.clouddn.com/5ce15b91eb13fbec.jpg" alt="view_location"></p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>http://yoursite.com/about/index.html</url>
      <content type="html"><![CDATA[<p><img src="/images/me_pic.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://yoursite.com/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
